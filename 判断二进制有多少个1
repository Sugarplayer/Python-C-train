我们知道一个数的二进制&1可得该数二进制最低位是0还是1，那么在此基础上，只要我们每次判断完最低位后右移一位就可以得到此时最低位的值，移31位便可得到该数二进制中1的个数。

int count_one2(int m)  //必须要循环32次，效率太低
{
	int i = 0;
	int count = 0;
	for (i = 0; i < 32; i++)
	{
		if (((m >> i) & 1) == 1)
		{
			count++;
		}
	}
	return count;
}

或者
思路：我们发现一个数和该数减1后做按位与操作再赋给该数，即某数=某数&（某数-1），每执行一次，该数二进制最右边的1就会丢掉。那么我们便可以知道，只要一个数在变成0之前能执行多少次某数=某数&（某数-1）操作，该数的二进制便有多少个1。

#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <windows.h>
int count_one3(int m)
{
	int count = 0;
	while (m)
	{
		m = m&(m - 1);
		count++;
	}
	return count;
}
int main()
{
	int n = -1;
	int count = count_one3(n);
	printf("%d\n", count);
	system("pause");
	return 0;
}
